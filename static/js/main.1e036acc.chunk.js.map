{"version":3,"sources":["SearchPhoto.js","App.js","reportWebVitals.js","index.js"],"names":["SearchPhotos","useState","query","setQuery","pics","setPics","unsplash","createApi","accessKey","searchPhotos","e","a","preventDefault","search","getPhotos","page","perPage","color","orientation","then","result","response","results","className","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","map","pic","alt","alt_description","src","urls","full","width","height","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAIe,SAASA,IAAgB,IAAD,EACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,OAEXF,mBAAS,IAFE,mBAE5BG,EAF4B,KAEtBC,EAFsB,KAI7BC,EAAWC,YAAU,CACvBC,UAAW,gDAITC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACjBD,EAAEE,iBACFN,EAASO,OAAOC,UAAU,CACtBZ,MAAOA,EACPa,KAAM,EACNC,QAAS,GACTC,MAAO,QACPC,YAAa,aAEdC,MAAK,SAAAC,GAASf,EAAQe,EAAOC,SAASC,YATxB,2CAAH,sDAelB,OACI,gCACI,uBAAMC,UAAU,OAAOC,SAAUf,EAAjC,UACI,wBAAOc,UAAU,QAAQE,QAAQ,QAAjC,UACC,IADD,kBAIA,uBACAC,KAAK,OACLC,KAAK,QACLJ,UAAU,QACVK,YAAW,uBACXC,MAAO3B,EACP4B,SAAU,SAACpB,GAAD,OAAOP,EAASO,EAAEqB,OAAOF,UAEnC,wBAAQH,KAAK,SAASH,UAAU,SAAhC,uBAKJ,sBAAKA,UAAU,YAAf,UACKnB,EAAK4B,KAAI,SAACC,GAAD,OACV,qBAAKV,UAAU,OAAf,SACA,qBACIA,UAAU,cACVW,IAAKD,EAAIE,gBACTC,IAAKH,EAAII,KAAKC,KACdC,MAAM,MACNC,OAAO,SANgBP,EAAIQ,OAFnC,UCjCGC,MAZf,WACE,OACE,qBAAKnB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,+BACA,cAAC,EAAD,UCIOoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1e036acc.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { createApi } from 'unsplash-js';\r\n\r\n\r\nexport default function SearchPhotos() {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [pics, setPics] = useState([]);\r\n\r\n    const unsplash = createApi({\r\n        accessKey: 't7aR_b5u9K4L4J8UnmOvaRM3IXuYsGn7plmw4tOPfpA',\r\n      });\r\n \r\n\r\n    const searchPhotos = async (e) => {\r\n        e.preventDefault();\r\n        unsplash.search.getPhotos({\r\n            query: query,\r\n            page: 1,\r\n            perPage: 10,\r\n            color: 'green',\r\n            orientation: 'portrait',\r\n          })\r\n          .then(result=>{setPics(result.response.results)});\r\n      };\r\n      \r\n\r\n    \r\n\r\n    return ( \r\n        <div>\r\n            <form className=\"form\" onSubmit={searchPhotos}>\r\n                <label className=\"label\" htmlFor=\"query\">\r\n                {\" \"}\r\n                ðŸ“·\r\n                </label>\r\n                <input\r\n                type=\"text\"\r\n                name=\"query\"\r\n                className=\"input\"\r\n                placeholder={`Try \"dog\" or \"apple\"`}\r\n                value={query}\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                />\r\n                <button type=\"submit\" className=\"button\">\r\n                Search\r\n                </button>\r\n            </form>\r\n\r\n            <div className=\"card-list\">\r\n                {pics.map((pic) =>\r\n                <div className=\"card\" key={pic.id}>\r\n                <img\r\n                    className=\"card--image\"\r\n                    alt={pic.alt_description}\r\n                    src={pic.urls.full}\r\n                    width=\"50%\"\r\n                    height=\"50%\"\r\n                ></img>\r\n                </div>)};\r\n             \r\n            </div>\r\n      </div>\r\n      \r\n     );\r\n}\r\n ","import './App.css';\nimport SearchPhoto from \"./SearchPhoto\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"title\">React Photo share</h1>\n        <SearchPhoto />\n      </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}